<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[etcdv2 etcdv3(带证书)部署过程记录]]></title>
    <url>%2F2019%2F06%2F03%2Fetcd%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[安装cfssl 12345wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64chmod +x cfssl_linux-amd64 cfssljson_linux-amd64mv cfssl_linux-amd64 /usr/local/bin/cfsslmv cfssljson_linux-amd64 /usr/local/bin/cfssljson 创建CA 123# cfssl print-defaults config &gt; ca-config.json# cfssl print-defaults csr &gt; ca-csr.json 修改ca-config.json为： 1234567891011121314151617181920&#123; &quot;signing&quot;: &#123; &quot;default&quot;: &#123; &quot;expiry&quot;: &quot;8760h&quot; &#125;, &quot;profiles&quot;: &#123; &quot;kubernetes&quot;: &#123; &quot;expiry&quot;: &quot;8760h&quot;, &quot;usages&quot;: [ &quot;signing&quot;, &quot;key encipherment&quot;, &quot;server auth&quot;, &quot;client auth&quot; ] &#125; &#125; &#125;&#125; //修改过期时间为一年server auth表示client可以用该ca对server提供的证书进行验证client auth表示server可以用该ca对client提供的证书进行验证 修改ca-csr.json 12345678910111213141516&#123; &quot;CN&quot;: &quot;kubernetes&quot;, &quot;key&quot;: &#123; &quot;algo&quot;: &quot;rsa&quot;, &quot;size&quot;: 2048 &#125;, &quot;names&quot;: [ &#123; &quot;C&quot;: &quot;CN&quot;, &quot;L&quot;: &quot;shenzhen&quot;, &quot;ST&quot;: &quot;guangdong&quot;, &quot;O&quot;: &quot;k8s&quot;, &quot;OU&quot;: &quot;System&quot; &#125; ]&#125; 生成CA证书和私钥 123# cfssl gencert -initca ca-csr.json | cfssljson -bare ca# ls ca*ca-config.json ca.csr ca-csr.json ca-key.pem ca.pem 创建etcd证书 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556 #cat kubernetes-csr.json &#123; &quot;CN&quot;: &quot;kubernetes&quot;, &quot;hosts&quot;: [ &quot;127.0.0.1&quot;, &quot;192.168.10.109&quot;, &quot;192.168.10.110&quot;, &quot;192.168.10.111&quot; ], &quot;key&quot;: &#123; &quot;algo&quot;: &quot;rsa&quot;, &quot;size&quot;: 2048 &#125;, &quot;names&quot;: [ &#123; &quot;C&quot;: &quot;CN&quot;, &quot;ST&quot;: &quot;guangdong&quot;, &quot;L&quot;: &quot;shenzhen&quot;, &quot;O&quot;: &quot;k8s&quot;, &quot;OU&quot;: &quot;System&quot; &#125; ] &#125;生成证书的时候，如果是走阿里云的slb转发，需要加上slb的外网ip,比如： &#123; &quot;CN&quot;: &quot;kubernetes&quot;, &quot;hosts&quot;: [ &quot;127.0.0.1&quot;, &quot;192.168.10.109&quot;, &quot;192.168.10.110&quot;, &quot;192.168.10.111&quot; //此处加，也可以加域名，用于通过域名代理访问 ], &quot;key&quot;: &#123; &quot;algo&quot;: &quot;rsa&quot;, &quot;size&quot;: 2048 &#125;, &quot;names&quot;: [ &#123; &quot;C&quot;: &quot;CN&quot;, &quot;ST&quot;: &quot;guangdong&quot;, &quot;L&quot;: &quot;shenzhen&quot;, &quot;O&quot;: &quot;k8s&quot;, &quot;OU&quot;: &quot;System&quot; &#125; ] &#125; ------------------------------------------- #cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare etcd //生成etcd证书 需要注意的是profile 必须得是kubernetes [root@test1 certs]# ll etcd* -rw-r--r-- 1 root root 1074 May 30 13:18 etcd.csr -rw------- 1 root root 1675 May 30 13:18 etcd-key.pem -rw-r--r-- 1 root root 1452 May 30 13:18 etcd.pem etcdv3带证书： centos 7下服务配置文件如下：$ cat /usr/lib/systemd/system/etcd.service 123456789101112131415161718192021222324252627282930[Unit]Description=Etcd ServerAfter=network.targetAfter=network-online.targetWants=network-online.target[Service]Type=notifyEnvironmentFile=-/usr/local/etcd/conf/etcd.confExecStart=/usr/local/etcd/bin/etcd \--name=$&#123;ETCD_NAME&#125; \--data-dir=$&#123;ETCD_DATA_DIR&#125; \--listen-peer-urls=$&#123;ETCD_LISTEN_PEER_URLS&#125; \--listen-client-urls=$&#123;ETCD_LISTEN_CLIENT_URLS&#125;,http://127.0.0.1:2379 \--advertise-client-urls=$&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \--initial-advertise-peer-urls=$&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \--initial-cluster=$&#123;ETCD_INITIAL_CLUSTER&#125; \--initial-cluster-token=$&#123;ETCD_INITIAL_CLUSTER&#125; \--initial-cluster-state=new \--cert-file=/usr/local/etcd/certs/etcd.pem \--key-file=/usr/local/etcd/certs/etcd-key.pem \--peer-cert-file=/usr/local/etcd/certs/etcd.pem \--peer-key-file=/usr/local/etcd/certs/etcd-key.pem \--trusted-ca-file=/usr/local/etcd/certs/ca.pem \--peer-trusted-ca-file=/usr/local/etcd/certs/ca.pemRestart=on-failureLimitNOFILE=65536[Install]WantedBy=multi-user.target etcdv3变量定义cat /usr/local/etcd/conf/etcd.conf //etcdv3的配置文件 123456789101112#[Member]ETCD_NAME=test1ETCD_DATA_DIR=&quot;/data/etcd&quot;ETCD_LISTEN_PEER_URLS=&quot;https://192.168.10.109:2380&quot;ETCD_LISTEN_CLIENT_URLS=&quot;https://192.168.10.109:2379&quot;#[Clustering]ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://192.168.10.109:2380&quot;ETCD_ADVERTISE_CLIENT_URLS=&quot;https://192.168.10.109:2379&quot;ETCD_INITIAL_CLUSTER=&quot;test1=https://192.168.10.109:2380,test2=https://192.168.10.110:2380,test3=https://192.168.10.111:2380&quot;ETCD_INITIAL_CLUSTER_TOKEN=&quot;gcp-test-etcdv3&quot;ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot; etcdv2配置： 1./etcd -name gcp01022 -initial-advertise-peer-urls http://192.168.10.99:2480 -data-dir /data/etcd_2.0/data -listen-peer-urls http://192.168.10.99:2480 -listen-client-urls http://192.168.10.99:2479,http://127.0.0.1:2479 -advertise-client-urls http://192.168.10.99:2479 -initial-cluster gcp01024=http://192.168.10.24:2480,gcp01023=http://192.168.10.23:2480,gcp01022=http://192.168.10.99:2480 -initial-cluster-token gcp-etcdv2 -initial-cluster-state new]]></content>
      <categories>
        <category>kubernetes etcd</category>
      </categories>
      <tags>
        <tag>etcd</tag>
        <tag>CA证书</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F31%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
